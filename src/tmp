let conn = Connection::open("worterkasten.db").unwrap();



    match conn.execute("UPDATE foo SET bar = 'baz' WHERE qux = ?", &[&1i32]) {
        Ok(updated) => println!("{} rows were updated", updated),
        Err(err) => println!("update failed: {}", err),
    }

    let _select_result =
       conn.iterate("SELECT trigger FROM talking", |sql_result| {
        for &(_column, value) in sql_result.iter() {
            println!("{:?} {}",trigger_word_list, value.unwrap());
        }
        true
    })
    .unwrap();

conn
.iterate("SELECT trigger FROM talking ", |pairs| {
    for &(column, value) in pairs.iter() {
    println!("{} = {}", column, value.unwrap());
    }
    true
})
.unwrap();

conn.execute(
    "
    INSERT INTO talking (trigger, answer) VALUES ('hello', 'hello mon zubr');
    ",
).unwrap();


let mut _insert_statement =
    match connection_db.execute("INSERT INTO talking (trigger, answer) VALUES ('test3, 'super test3');"){
        Ok(add_chat) => {
            println!("plop");
            add_chat
        }
        Err(e) => {
            println!("Error: {}", e);
            return "ERROR".to_string()
            }
      };





      for x in trigger_word_list {
          if choice.contains(x) {
              let mut select_statement =
                  match connection_db.prepare("SELECT answer FROM talking where trigger=?"){
                      Ok(match_word) => {
                          match_word
                      }
                      Err(e) => {
                          println!("Error select word: {}", e);
                          return "ERROR".to_string()
                          }
                    };
              select_statement.bind(1, &x[..]).unwrap();
              while let State::Row = select_statement.next().unwrap() {
                  let blabla = select_statement.read::<String>(0).unwrap();
                  return blabla;
              }
              break;
          }
      }


      fn my_deamon() -> Child {
          let mut daemon = Command::new("my/other/programm.sh")
              .stdout(Stdio::piped())
              .spawn()
              .unwrap();
      return daemon
      }
